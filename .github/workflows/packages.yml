name: Packages

on:
  push:
    branches:
    - master
    - dev
    - 'dev/**'
    paths:
    - 'packages/**'
    - 'root-packages/**'
    - 'x11-packages/**'
  pull_request:
    paths:
    - 'packages/**'
    - 'root-packages/**'
    - 'x11-packages/**'
  workflow_dispatch:
    inputs:
      packages:
        description: "A space-separated names of packages selected for rebuilding"
        required: true

permissions: {} # none

jobs:
  build:
    permissions:
      contents: read # actions/upload-artifact doesn't need contents: write
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target_arch: [aarch64, arm, i686, x86_64]
      fail-fast: false
    steps:
    - name: Setup arm and aarch64 CPU emulators
      uses: dbhi/qus/action@main
      with:
        targets: arm aarch64
    - name: Clone repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1000

    - name: Lint packages
      run: |
        declare -a package_recipes
        for repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          repo=$(jq --raw-output '.["'${repo_path}'"].name' repo.json)
          if [ -f ./built_${repo}_packages.txt ]; then
            package_recipes="$package_recipes $(cat ./built_${repo}_packages.txt | repo_path=${repo_path} awk '{print ENVIRON["repo_path"]"/"$1"/build.sh"}')"
          fi
        done

        if [ ! -z "$package_recipes" ]; then
          ./scripts/lint-packages.sh $package_recipes
        fi

    - name: Free additional disk space (if necessary)
      run: |
        declare -a packages
        for repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          repo=$(jq --raw-output '.["'${repo_path}'"].name' repo.json)

          if [ -f ./built_${repo}_packages.txt ]; then
            packages="$packages $(cat ./built_${repo}_packages.txt | tr '\n' ' ')"
          fi
        done

        if [ ! -z "$packages" ]; then
          if grep -qP "(^|\\s)${packages// /($|\\s)|(^|\\s)}($|\\s)" ./scripts/big-pkgs.list; then
            ./scripts/setup-ubuntu.sh
            sudo apt install ninja-build
            sudo apt purge -yq $(dpkg -l | grep '^ii' | awk '{ print $2 }' | grep -P '(aspnetcore|cabal-|dotnet-|ghc-|libmono|mongodb-|mysql-|php)') \
              firefox google-chrome-stable microsoft-edge-stable mono-devel mono-runtime-common monodoc-manual ruby
            sudo apt autoremove -yq
            sudo apt clean
            sudo rm -fr /opt/hostedtoolcache /usr/lib/node_modules /usr/share/dotnet /usr/share/swift
          fi
        fi

    - name: Build packages
      run: |
        declare -a packages
        for repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          repo=$(jq --raw-output '.["'${repo_path}'"].name' repo.json)

          if [ -f ./built_${repo}_packages.txt ]; then
            packages="$packages $(cat ./built_${repo}_packages.txt | tr '\n' ' ')"
          fi
        done

        if [ ! -z "$packages" ]; then
          if grep -qP "(^|\\s)${packages// /($|\\s)|(^|\\s)}($|\\s)" ./scripts/big-pkgs.list; then
            NDK=$ANDROID_NDK_LATEST_HOME ANDROID_HOME=$ANDROID_SDK_ROOT ./build-package.sh -I -a ${{ matrix.target_arch }} $packages
          else
            ./scripts/run-docker.sh ./build-package.sh -I -a ${{ matrix.target_arch }} $packages
          fi
        fi

    - name: Generate build artifacts
      if: always()
      run: |
        test -d termux-packages/output && mv termux-packages/output/* ./output/

        for repo in $(jq --raw-output 'del(.pkg_format) | .[].name' repo.json); do
          # Put package lists into directory with *.deb files so they will be transferred to
          # upload job.
          test -f ./built_${repo}_packages.txt && mv ./built_${repo}_packages.txt ./debs/
          test -f ./built_${repo}_subpackages.txt && cat ./built_${repo}_subpackages.txt >> ./debs/built_${repo}_packages.txt \
            && rm ./built_${repo}_subpackages.txt
          test -f ./deleted_${repo}_packages.txt && mv ./deleted_${repo}_packages.txt ./debs/

          # Move only debs from built_packages into debs/ folder before
          # creating an archive.
          while read -r pkg; do
            # Match both $pkg.deb and $pkg-static.deb.
            find output \( -name "$pkg_*.deb" -o -name "$pkg-static_*.deb" \) -type f -print0 | xargs -0r mv -t debs/
          done < <(cat ./debs/built_${repo}_packages.txt)
        done

        # Files containing certain symbols (e.g. ":") will cause failure in actions/upload-artifact.
        # Archiving *.deb files in a tarball to avoid issues with uploading.
        tar cf artifacts/debs-${{ matrix.target_arch }}-${{ github.sha }}.tar debs
    - name: Checksums for built *.deb files
      if: always()
      run: |
        find debs -type f -name "*.deb" -exec sha256sum "{}" \; | sort -k2
    - name: Store *.deb files
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: debs-${{ matrix.target_arch }}-${{ github.sha }}
        path: ./artifacts

  upload:
    concurrency: ${{ github.workflow }}
    permissions:
      contents: read
    if: github.event_name != 'pull_request' && github.ref != 'refs/heads/dev' && !startsWith(github.ref, 'refs/heads/dev/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Get *.deb files
      uses: actions/download-artifact@v3
      with:
        path: ./
    - name: Upload to artifacts
      run: |
        # Create an apt repository structure in a new directory
        mkdir -p apt-repo/debs
        mv debs/*.deb apt-repo/debs/

        # Generate Packages file for the repository
        dpkg-scanpackages apt-repo/debs /dev/null | gzip -9c > apt-repo/debs/Packages.gz

        # Zip the repository for upload
        zip -r apt-repo.zip apt-repo

        # Upload the zip file to GitHub Artifacts
        echo "Uploading apt-repo.zip to GitHub Artifacts..."
        gh workflow run upload-artifact --repo ${{ github.repository }} -f apt-repo.zip


